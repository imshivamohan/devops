FROM alpine:latest AS builder


WORKDIR /app

# Install required dependencies
RUN apk add --no-cache openjdk17 maven unzip binutils

# Copy source code
COPY . .

# Build the Java application using Maven
RUN mvn clean package

# Extract dependencies using jdeps and generate minimal JRE using JLink
RUN unzip target/demo-app-1.0.0.jar -d temp && \
    jdeps \
      --print-module-deps \
      --ignore-missing-deps \
      --recursive \
      --multi-release 17 \
      --class-path="./temp/BOOT-INF/lib/*" \
      --module-path="./temp/BOOT-INF/lib/*" \
      target/demo-app-1.0.0.jar > /modules.txt && \
    jlink \
      --verbose \
      --add-modules "$(cat /modules.txt),jdk.crypto.ec,jdk.crypto.cryptoki" \
      --strip-debug \
      --no-man-pages \
      --no-header-files \
      --compress=2 \
      --output /jre

# Stage 2 - Minimal Runtime
FROM alpine:latest

# Set up Java environment
ENV JAVA_HOME=/jre
ENV PATH="${JAVA_HOME}/bin:${PATH}"

WORKDIR /app

# Copy the custom JRE built in the builder stage
COPY --from=builder /jre $JAVA_HOME

# Ensure Java binary is executable
RUN chmod +x $JAVA_HOME/bin/*

# Copy the built Java application
COPY --from=builder /app/target/demo-app-1.0.0.jar /app/app.jar

# Expose the application port
EXPOSE 8080

# Run the Java application with the minimal JRE
CMD ["/jre/bin/java", "-jar", "/app/app.jar"]

